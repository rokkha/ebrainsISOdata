pip install neo

import neo
import numpy as np
import pandas as pd

# Replace 'your_file.smr' with the path to your actual .smr file
file_path = 'your_file.smr'

# Load the .smr file using neo with try_signal_grouping=False
reader = neo.io.Spike2IO(filename=file_path, try_signal_grouping=False)
block = reader.read_block()

# List to store DataFrames for each channel's peak-to-peak amplitude
dfs_per_channel = []

# Define the window size in seconds
window_size = 3

# Calculate the number of samples per window
samples_per_window = int(window_size * block.segments[0].analogsignals[0].sampling_rate)

# Loop through each channel
for channel_index in range(32):  # Assuming 32 channels
    # Get the analog signal (waveform) for the current channel
    analog_signal = block.segments[0].analogsignals[channel_index]

    # Calculate the number of windows for the current channel
    num_windows = int(len(analog_signal) / samples_per_window)

    # Initialize lists to store peak-to-peak amplitudes and window start times for the current channel
    peak_to_peak_amplitudes = []
    window_start_times = []

    # Loop through each window and calculate peak-to-peak amplitude for the current channel
    for window_index in range(num_windows):
        # Calculate the start and end indices for the current window
        start_index = window_index * samples_per_window
        end_index = (window_index + 1) * samples_per_window

        # Get the data (amplitude) for the current window and channel
        window_data = analog_signal[start_index:end_index]

        # Calculate the peak-to-peak amplitude for the current window and channel
        peak_to_peak_amplitude = np.max(window_data) - np.min(window_data)

        # Store the peak-to-peak amplitude and window start time in the lists
        peak_to_peak_amplitudes.append(peak_to_peak_amplitude.magnitude)  # Exclude units
        window_start_time = start_index / analog_signal.sampling_rate
        window_start_times.append(window_start_time)

    # Create a DataFrame for the current channel's data (without units)
    data = {'Window Start Time (s)': window_start_times, f'Peak-to-Peak Amplitude (Channel {channel_index + 1})': peak_to_peak_amplitudes}
    df_channel = pd.DataFrame(data)

    # Append the DataFrame to the list for each channel
    dfs_per_channel.append(df_channel)

# Export each channel's DataFrame to a separate sheet in the Excel file (without units)
with pd.ExcelWriter('peak_to_peak_amplitudes_per_channel.xlsx') as writer:
    for channel_index, df_channel in enumerate(dfs_per_channel):
        df_channel.to_excel(writer, sheet_name=f'Channel_{channel_index + 1}', index=False)
